

import * as fs from 'fs';
import * as yaml from 'js-yaml';
import * as path from 'path';

// Basic types for OpenAPI specification
interface Parameter {
  name: string;
  in: 'query' | 'header' | 'path' | 'cookie';
  description?: string;
  required?: boolean;
  schema?: any;
}

interface Operation {
  parameters?: Parameter[];
  summary?: string;
  description?: string;
}

interface PathItem {
  get?: Operation;
  post?: Operation;
  put?: Operation;
  delete?: Operation;
  patch?: Operation;
}

interface OpenAPIObject {
  paths: {
    [path: string]: PathItem;
  };
}

/**
 * Converts an API path to a PascalCase type name.
 * Example: /osidb/api/v1/flaws/{uuid}/comments -> GetOsidbApiV1FlawsByUuidCommentsQueryParams
 */
function pathToTypeName(method: string, apiPath: string): string {
  const cleanedPath = apiPath
    .replace(/[^a-zA-Z0-9/_{}]/g, '') // Remove special characters except slashes and braces
    .replace(/{/g, 'By/') // Replace { with By/ for path parameters
    .replace(/}/g, ''); // Remove }

  const parts = cleanedPath.split('/').filter(Boolean);
  const pascalCaseName = parts
    .map((part) => part.charAt(0).toUpperCase() + part.slice(1))
    .join('');

  return `${method.charAt(0).toUpperCase() + method.slice(1)}${pascalCaseName}QueryParams`;
}


const openapiPath = path.resolve(__dirname, '../openapi.yml');
const outputPath = path.resolve(__dirname, '../src/types/osidb-query-params.ts');

try {
  const fileContents = fs.readFileSync(openapiPath, 'utf8');
  const data = yaml.load(fileContents) as OpenAPIObject;

  if (!data.paths) {
    throw new Error('No paths found in openapi.yml');
  }

  const typeStrings: string[] = [];

  for (const [apiPath, pathItem] of Object.entries(data.paths)) {
    if (apiPath.includes('osidb') && pathItem.get) {
      const parameters = pathItem.get.parameters;
      if (parameters) {
        const queryParams = parameters.filter((p) => p.in === 'query');
        if (queryParams.length > 0) {
          const typeName = pathToTypeName('get', apiPath);
          let typeString = `/**\n * Query parameters for GET ${apiPath}\n */\n`;
          typeString += `export type ${typeName} = {\n`;
          queryParams.forEach((p) => {
            const description = p.description ? ` // ${p.description.replace(/\n/g, ' ')}` : '';
            typeString += `  '${p.name}'?: string;${description}\n`;
          });
          typeString += '};\n';
          typeStrings.push(typeString);
        }
      }
    }
  }

  const outputContent =
`// This file is auto-generated by scripts/get-osidb-query-params.ts\n// Do not edit this file manually.\n\n${typeStrings.join('\n')}\n`;

  fs.writeFileSync(outputPath, outputContent);
  console.log(`Successfully generated query parameter types at: ${outputPath}`);

} catch (e) {
  console.error('Error processing openapi.yml:', e);
  process.exit(1);
}

